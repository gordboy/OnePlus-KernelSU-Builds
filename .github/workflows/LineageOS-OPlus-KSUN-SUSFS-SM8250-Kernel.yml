name: Build AK3 zip with LineageOS OPlus SM8250 Kernel with KSUN/SUSFS from latest jcallan1986 source repos

on:
  workflow_dispatch:

env:
  TZ: Europe/London

jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set swap to 10G
      uses: pierotofy/set-swap-space@master
      with:
        swap-size-gb: 10
    
    - name: Setup build kernel environment
      run: |
        echo "BUILD_TIME=$(TZ=Europe/London date "+%y%m%d")" >> $GITHUB_ENV
        echo "BUILD_TIME_1=$(TZ=Europe/London date "+%Y-%m-%d")" >> $GITHUB_ENV
        sudo apt-get update
        sudo apt-get install git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib bzip2 libbz2-dev liblz4-tool make squashfs-tools dpkg-dev libssl-dev python3 bc libc6-dev-i386 libncurses5-dev
        mkdir -p $GITHUB_WORKSPACE/kernel_workspace
    
    - name: Download Clang
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        mkdir clang
        wget -O clang.tar.xz https://github.com/llvm/llvm-project/releases/download/llvmorg-19.1.7/LLVM-19.1.7-Linux-X64.tar.xz
        tar -C clang/ -xvf clang.tar.xz --strip-components 1
    
    - name: Download GCC-64
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
          mkdir gcc-64
          wget -O gcc-aarch64.tar.gz https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz
          tar -C gcc-64/ -zxvf gcc-aarch64.tar.gz
    
    - name: Download kernel sources fully expanded
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone --recurse-submodules -j8 https://github.com/jcallan1986/op8_los22.2_next_susfs.git -b lineage-22.2 android-kernel --depth 1 --shallow-submodules

    - name: Build kernel
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        export ARCH=arm64
        export SUBARCH=arm64
        export PATH=$GITHUB_WORKSPACE/kernel_workspace/clang/bin:$GITHUB_WORKSPACE/kernel_workspace/gcc-64/bin:$PATH
        export KBUILD_BUILD_HOST=Github-Action
        export KBUILD_BUILD_USER=$(echo ${{ github.actor }} | tr A-Z a-z)
        BA_CMD="CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE=aarch64-linux-android-"
        EX_CMD="LD=ld.lld LLVM=1 LLVM_IAS=1"
        DEFCONFIG="vendor/kona-perf_defconfig vendor/debugfs.config"
        make O=out ARCH=arm64 CC=clang $BA_CMD $EX_CMD $DEFCONFIG
        make -j$(nproc --all) O=out ARCH=arm64 CC=clang $BA_CMD $EX_CMD
    
    - name: Check kernel output file
      run: |
       cd $GITHUB_WORKSPACE/kernel_workspace
       if [ -f android-kernel/out/arch/arm64/boot/Image ]; then
           echo "CHECK_IMAGE=true" >> $GITHUB_ENV
       else
           echo "Kernel output file is empty"
           exit 1
       fi
      
    - name: Make AnyKernel3
      if: env.CHECK_IMAGE == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://github.com/jcallan1986/AnyKernel3.git --depth=1 AnyKernel3
        sed -i 's/do.devicecheck=1/do.devicecheck=0/g' AnyKernel3/anykernel.sh
        sed -i 's!BLOCK=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;!BLOCK=auto;!g' AnyKernel3/anykernel.sh
        sed -i 's/IS_SLOT_DEVICE=0;/IS_SLOT_DEVICE=auto;/g' AnyKernel3/anykernel.sh
        cp android-kernel/out/arch/arm64/boot/Image AnyKernel3/
        rm -f AnyKernel3/.git* AnyKernel3/README.md

    - name: Upload AnyKernel3 (auto zipped)
      if: env.CHECK_IMAGE == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: AK3-LOS22.2-OPlus-SM8250-KSUN-SUSFS.zip
        path: kernel_workspace/AnyKernel3/*
